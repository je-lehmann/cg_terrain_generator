// map x,y,z coord to a density value n between +1 and -1
// feed user parameters in here to manipulate generated perlin noise!
// public virtual ComputeBuffer Generate (ComputeBuffer pointBuffer, int vertsPerAxis, ... pos, scale, more stuff?) {

#pragma kernel DensityFunction
#include "NoiseLibrary.compute"
#include "perlin.compute"

//static const int numThreads = 64; // overwrite this? 
//for GTX 1650 the maxThreads is 12800, but Unity only allows 1024 :(
RWStructuredBuffer<float4> verts;
StructuredBuffer<float3> offsets;

int resolution;
float scale;
bool noiseEnabled;
float3 center;


[numthreads(8,8,8)]
void DensityFunction (int3 id : SV_DispatchThreadID){
    
    if (id.x >= resolution || id.y >= resolution || id.z >= resolution) {
        return;
    }
    
    float spacing = scale / (resolution - 1);
    float3 pos = (spacing * id) + center - scale/2;
    float d = 0;
    if (noiseEnabled){
        // We use horizontal Landscape and add different Frequencies of Perlin Noise
        d = pos.y + 2 * snoise(0.3*pos); //+ 1 * ClassicNoise(0.4*pos_2) ...

    } else {
        // For a horizontal Landscape
        d = pos.y;
    }

    int index = id.x + id.y * resolution + id.z * resolution * resolution;
    verts[index] = float4(pos, d);
}
