// map x,y,z coord to a density value n between +1 and -1
// feed user parameters in here to manipulate generated perlin noise!
// public virtual ComputeBuffer Generate (ComputeBuffer pointBuffer, int vertsPerAxis, ... pos, scale, more stuff?) {

#pragma kernel DensityFunction
#include "NoiseLibrary.compute"
#include "perlin.compute"

//static const int numThreads = 64; // overwrite this? 
//for GTX 1650 the maxThreads is 12800, but Unity only allows 1024 :(
RWStructuredBuffer<float4> verts;
StructuredBuffer<float3> offsets;

int resolution;
float scale;
bool noiseEnabled;
float3 center;

// For Frequency and Amplitude Manipulation: 
bool noise3d;
float octaveOneAmplitude;
float octaveTwoAmplitude;
float octaveThreeAmplitude;
float octaveFourAmplitude;
float octaveFiveAmplitude;
float octaveSixAmplitude;
float baseFrequency;


[numthreads(8,8,8)]
void DensityFunction (int3 id : SV_DispatchThreadID){
    
    if (id.x >= resolution || id.y >= resolution || id.z >= resolution) {
        return;
    }
    //scale = scale / (vertsPerAxis - 1);
    //float3 pos = id * scale; 
    // float2 pos_xz = float2(pos.x, pos.z);

    float spacing = scale / (resolution - 1);
    float3 pos = (spacing * id) + center - scale/2;
    float2 pos_xz = float2(pos.x, pos.z);
    float d = 0;
    if (noiseEnabled){
        if(noise3d) {
            // We use horizontal Landscape and add different Octaves of SNoise
            d = pos.y + octaveOneAmplitude * snoise(baseFrequency*pos) + octaveTwoAmplitude * snoise(baseFrequency*2*pos) + octaveThreeAmplitude * snoise(baseFrequency*4*pos) + octaveFourAmplitude * snoise(baseFrequency*8*pos) + octaveFiveAmplitude * snoise(baseFrequency*16*pos) + octaveSixAmplitude * snoise(baseFrequency*32*pos);
        } else {
           // d = pos.y + 2 * ClassicNoise(0.3*pos_xz);
           d = pos.y + octaveOneAmplitude * ClassicNoise(baseFrequency*pos_xz) + octaveTwoAmplitude * ClassicNoise(baseFrequency*2*pos_xz) + octaveThreeAmplitude * ClassicNoise(baseFrequency*4*pos_xz) + octaveFourAmplitude * ClassicNoise(baseFrequency*8*pos_xz) + octaveFiveAmplitude * ClassicNoise(baseFrequency*16*pos_xz) + octaveSixAmplitude * ClassicNoise(baseFrequency*32*pos_xz);
        }
        //d = pos.y + 2 * snoise(0.3*pos); //+ 1 * ClassicNoise(0.4*pos_2) ...

    } else {
        // For a horizontal Landscape
        d = pos.y;
    }

    int index = id.x + id.y * resolution + id.z * resolution * resolution;
    verts[index] = float4(pos, d);
}
